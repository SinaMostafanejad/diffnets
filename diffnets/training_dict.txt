###Dictionary keys for training a DiffNet.

layer_sizes : list, shape=(n_layers,)
    Specifies how many nodes in each encoder layer. First two values in
    layer_sizes must be equivalent and equal to the number of features in
    a training sample. Decoder will be a mirror image.

do_em : boolean, 
    Option to use the self-supervised expectation maximization scheme.

em_bounds : np.ndarray, shape=(n_variants,2)
    A range that sets what fraction of conformations you expect a variant
    to have biochemical property. Rank order of variants is more important
    than the range itself. Order of variants should reflect each variants
    value in the "indicators" dir files.

em_batch_size :  int
   Number of examples that are have their classification labels updated in a 
   single round of expectation maximization.

em_n_cores : int
   CPU cores to use for expectation maximization calculation

nntype : nnutils object
    Object that specifies the neural net architecture to be used.

lr : float
    Learning rate.

n_latent : int
    number of latent variables

n_epochs : int
    Number of times to train the neural network on data points

data_dir : str
    Path to directory that contains a whitening matrix (wm.npy), an
    unwhitening matrix (uwm.npy), and the average center of mass of each
    atom across all trajectories (cm.npy). Additionally has an "indicators"
    dir and an "aligned_xtcs" dir that correspond to each other. i.e. every
    frame from an xtc has a corresponding "indicator" value which indicates
    which variant the frame came from.

act_map : np.ndarray, shape=(n_variants,)
    Initial classification labels to give each variant. The 0th index
    corresponds to all frames with "indicator" values of 0. The 1st index
    corresponds to all frames with "indicator" values of 1 and so on. 
    e.g. if act_map=[0,0,1,1] then whatever xtc frames have indicator values
    of 0 or 1 will get classification labels of 0 and xtc frames with indicator
    values of 2 or 3 will get classification labels of 1.

batch_size : int
   Number of examples for neural network to look at between 
   each update of the weights.

batch_output_freq : int
   Frequency to write out updates.

epoch_output_freq : int
   Frequency to write out updates.

test_batch_size : int
    Batch size when testing neural network on validation set.

frac_test : float between 0 and 1
    Fraction of examples that the neural network will be evaluated on
    instead of trained on.

subsample : int
   Subsample every nth data frame in a given epoch of training. Across all 
   epochs it is still possible for the training to have seen every example.

outdir : str
    Path to where all of the training output will go.

gaussian_labels : boolean
    Option to draw labels from a gaussian centered on values in act_map.

inds1 : np.ndarray
    Indices - relative to the entire input - that will go into the
    classification task. ONLY USE WITH SPLIT AUTOENCODER ARCHITECTURES.

inds2 : np.ndarray
    Indices - relative to the entire input - that will NOT go into the
    classification task. ONLY USE WITH SPLIT AUTOENCODER ARCHITECTURES.
